-- MySQL dump 10.13  Distrib 5.5.41, for debian-linux-gnu (i686)
--
-- Host: localhost    Database: terrabase_test
-- ------------------------------------------------------
-- Server version	5.5.41-0ubuntu0.12.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `kb_articles`
--

DROP TABLE IF EXISTS `kb_articles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `kb_articles` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `category_id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `summary` text,
  `content` text,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  `author_id` int(11) NOT NULL DEFAULT '0',
  `comments_count` int(11) DEFAULT NULL,
  `project_id` int(11) DEFAULT '0',
  `updater_id` int(11) NOT NULL DEFAULT '0',
  `version_comments` varchar(255) DEFAULT NULL,
  `version` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `kb_articles`
--

LOCK TABLES `kb_articles` WRITE;
/*!40000 ALTER TABLE `kb_articles` DISABLE KEYS */;
INSERT INTO `kb_articles` VALUES (2,3,'Development:lib/formslib.php Form Definition','Form Definition','*definition()*\r\n\r\nThe definition of the elements to be included in the form, their \'types\' (PARAM_*), helpbuttons included, etc. is all included in a function you must define in your class.\r\n\r\n@definition()@ is used to define the elements in the form and this definition will be used for validating data submitted as well as for printing the form. For select and checkbox type elements only data that could have been selected will be allowed. And only data that corresponds to a form element in the definition will be accepted as submitted data.\r\n\r\nThe definition() should include all elements that are going to be used on form, some elements may be removed or tweaked later in definition_after_data(). Please do not create conditional elements in @definition()@, the @definition()@ should not directly depend on the submitted data.\r\n\r\nNote that the definition function is called when the form class is instantiated. There is no option to (say) manipulate data in the class (that may affect the rendering of the form) between instantiating the form and calling any other methods.\r\n\r\n<pre>\r\nrequire_once(\"$CFG->libdir/formslib.php\");\r\n \r\nclass simplehtml_form extends moodleform {\r\n \r\n    function definition() {\r\n        global $CFG;\r\n \r\n        $mform =& $this->_form; // Don\'t forget the underscore! \r\n \r\n        $mform->addElement()... // Add elements to your form\r\n            ...\r\n    }                           // Close the function\r\n}                               // Close the class\r\n\r\n</pre>\r\nUse Fieldsets to group Form Elements\r\n\r\nYou use code like this to open a fieldset with a legend.\r\n(Note: Some themes turn off legends on admin setting pages by using CSS: @#adminsettings legend {display:none;}@.)\r\n\r\n<pre>\r\n$mform->addElement(\'header\', \'nameforyourheaderelement\', get_string(\'titleforlegened\', \'modulename\'));\r\n\r\n</pre>\r\nYou can\'t yet nest these visible fieldsets unfortunately. But in fact groups of elements are wrapped in invisible fieldsets.\r\n\r\nYou close a fieldset with moodle_form\'s @closeHeaderBefore@ method. You tell @closeHeaderBefore@ the element before you wish to end the fieldset. A fieldset is automatically closed if you open a new one. You need to use this code only if you want to close a fieldset and the subsequent form elements are not to be enclosed by a visible fieldset (they are still enclosed with an invisibe one with no legend) :\r\n\r\n<pre>\r\n$mform->closeHeaderBefore(\'buttonar\');\r\n\r\n</pre>\r\n\r\n*addElement*\r\n\r\nUse the addElement method to add an element to a form. The first few arguments are always the same. The first param is the type of the element to add. The second is the elementname to use which is normally the html name of the element in the form. The third is often the text for the label for the element.\r\n\r\nSome examples are below :\r\n\r\n*button*\r\n\r\n<pre>\r\n$mform->addElement(\'button\', \'intro\', get_string(\"buttonlabel\"));\r\n</pre>\r\n\r\nA button element. If you want a submit or cancel button see \'submit\' element.\r\n\r\n*checkbox*\r\n\r\n<pre>\r\n$mform->addElement(\'checkbox\', \'ratingtime\', get_string(\'ratingtime\', \'forum\'));\r\n</pre>\r\n\r\nThis is a simple checkbox. The third parameter for this element is the label to display on the left side of the form. You can also supply a string as a fourth parameter to specify a label that will appear on the right of the element. Checkboxes and radio buttons can be grouped and have individual labels on their right.\r\n\r\nYou can have a 5th parameter $attributes, as on other elements.\r\n\r\n*advcheckbox*\r\n\r\n<pre>\r\n$mform->addElement(\'advcheckbox\', \'ratingtime\', get_string(\'ratingtime\', \'forum\'), \'Label displayed after checkbox\', array(\'group\' => 1), array(0, 1));\r\n</pre>\r\n\r\nSimilar to the checkbox above, but with a couple of important improvements:\r\n\r\n# The 5th parameter is a normal $attributes array, normally used to set HTML attributes for the @<input>@ element. However, a special value of \'group\' can be given, which will add a class name to the element, and enable its grouping for a checkbox controller\r\n# The 6th parameter is an array of values that will be associated with the checked/unchecked state of the checkbox. With a normal checkbox you cannot choose that value, and in fact an unchecked checkbox will not even be sent with the form data. \r\n\r\n*choosecoursefile*\r\n\r\n<pre>\r\n$mform->addElement(\'choosecoursefile\', \'mediafile\', get_string(\'mediafile\', \'lesson\'), array(\'courseid\'=>$COURSE->id));\r\n</pre>\r\n\r\nChoose a file from the course files area. The fourth option is a list of options for the element.\r\n\r\n<pre>\r\narray(\'courseid\' =>null,  //if it is null (default then use global $COURSE\r\n      \'height\'   =>500,   // height of the popup window\r\n      \'width\'    =>750,   // width of the popup window\r\n      \'options\'  =>\'none\'); //options string for the pop up window \r\n                          //eg. \'menubar=0,location=0,scrollbars,resizable\'\r\n</pre>\r\n\r\nYou can also pass an optional 5th parameter of attributes, as for other elements. The most useful way of using that is something like\r\n\r\n<pre>\r\narray(\'maxlength\' => 255, \'size\' => 48)\r\n</pre>\r\n\r\nto control the maxlength / size of the text box (note size will default to 48 if not specified)\r\n\r\nFinally, as this element is a group containing two elements (button + value), you can add validation rules by using the @addGroupRule()@ method in this (complex) way:\r\n\r\n<pre>\r\n$mform->addGroupRule(\'elementname\', array(\'value\' => array(array(list, of, rule, params, but, fieldname))));\r\n\r\n</pre>\r\nWhere: \"elementname\" is the name of the choosecoursefile group element, \"value\" is the name of the text field within the group and the \"list, of, addrule, params, but, fieldname\" is exactly that, the list of fields in the normal @addRule()@ function but ommiting the first one, the fieldname.\r\n\r\nFor example, the file/url resource type, uses one \"choosecoursefile\" element, and it controls the maximum length of the field (255) with this use of @addGroupRule()@:\r\n\r\n<pre>\r\n$mform->addGroupRule(\'reference\', array(\'value\' => array(array(get_string(\'maximumchars\', \'\', 255), \'maxlength\', 255, \'client\'))));\r\n\r\n</pre>\r\n\r\n*date_selector*\r\n\r\n<pre>\r\n$mform->addElement(\'date_selector\', \'assesstimefinish\', get_string(\'to\'));\r\n</pre>\r\n\r\nThis is a date selector. You can select a Day, Month and Year using a group of select boxes. The fourth param here is an array of options. The defaults for the options are :\r\n\r\n<pre>\r\narray(\r\n    \'startyear\' => 1970, \r\n    \'stopyear\'  => 2020,\r\n    \'timezone\'  => 99, \r\n    \'applydst\'  => true, \r\n    \'optional\'  => false\r\n);\r\n</pre>\r\n\r\nYou can override these defaults by supplying an array as fourth param with one or more keys with a value to override the default. You can supply a fifth param of attributes here as well.\r\n\r\n*date_time_selector*\r\n\r\n<pre>\r\n$mform->addElement(\'date_time_selector\', \'assesstimestart\', get_string(\'from\'));\r\n</pre>\r\n\r\nThis is a group of select boxes to select a date (Day Month and Year) and time (Hour and Minute). When submitted, submitted data is processed and a timestamp is passed to $form->get_data(); the fourth param here is an array of options. The defaults for the options are:\r\n\r\n<pre>\r\narray(\r\n    \'startyear\' => 1970, \r\n    \'stopyear\'  => 2020,\r\n    \'timezone\'  => 99, \r\n    \'applydst\'  => true, \r\n    \'step\'      => 5\r\n);\r\n</pre>\r\n\r\nYou can override these defaults by supplying an array as fourth param with one or more keys with a value to override the default. You can supply a fifth param of attributes here as well.\r\n\r\n*duration*\r\n\r\nMoodle 2.0\r\n\r\n\r\n<pre>\r\n$mform->addElement(\'duration\', \'timelimit\', get_string(\'timelimit\', \'quiz\'));\r\n</pre>\r\n\r\nThis field type lets the user input an interval of time. It comprises a text field, where you can type a number, and a dropdown for selecting a unit (days, hours, minutes or seconds). When submitted the value is converted to a number of seconds.\r\n\r\nYou can add a fourth parameter to give options. At the moment the only option supported is here is an array of options. The defaults for the options is:\r\n\r\n<pre>\r\narray(\'optional\' => true)\r\n</pre>\r\n\r\nYou can also pass an optional 5th parameter of attributes, as for other elements. The most useful way of using that is something like\r\n\r\n<pre>\r\narray(\'size\' => 5)\r\n</pre>\r\n\r\nto control the size of the text box.\r\n\r\n*file*\r\n\r\nFile upload input box with browse button. In the form definition type\r\n\r\n<pre>\r\n$mform->addElement(\'file\', \'attachment\', get_string(\'attachment\', \'forum\'));\r\n</pre>\r\n\r\nafter form submission and validation use\r\n\r\n<pre>\r\nif ($data = $mform->get_data()) {\r\n      ...\r\n    $mform->save_files($destination_directory);\r\n      ...\r\n}\r\n\r\n</pre>\r\nIf you need advanced settings such as required file, different max upload size or name of uploaded file\r\n\r\n<pre>\r\n$this->set_upload_manager(new upload_manager(\'attachment\', true, false, $COURSE, false, 0, true, true, false));\r\n            $mform->addElement(\'file\', \'attachment\', get_string(\'attachment\', \'forum\'));\r\n            $mform->addRule(\'attachment\', null, \'required\');\r\n\r\nif ($data = $mform->get_data()) {\r\n      ...\r\n    $mform->save_files($destination_directory);\r\n    $newfilename = $mform->get_new_filename();\r\n      ...\r\n}\r\n</pre>\r\n\r\nWhen porting old code it is also possible to use the upload manager directly for processing of uploaded files.\r\n\r\nPlease note that if using set_upload_manager() it must be before addElement(\'file\',..).\r\n\r\nMoodle 2.0\r\n\r\n\r\nFile uploading was rewritten in 2.0. Please see inline docs for now. This page will be updated when the new API stabilises.\r\n\r\n*filepicker*\r\n\r\nMoodle 2.0\r\n\r\n\r\nGeneral replacement of file element.\r\n\r\n<pre>\r\n$mform->addElement(\'filepicker\', \'userfile\', get_string(\'file\'), null, array(\'maxbytes\' => $maxbytes, \'accepted_types\' => \'*\'));\r\n</pre>\r\n\r\nSee also Development:Using the File API in Moodle forms\r\n\r\n*hidden*\r\n\r\n<pre>\r\n$mform->addElement(\'hidden\', \'reply\', \'yes\');\r\n</pre>\r\n\r\nA hidden element. Set the element name (in this case reply) to the stated value (in this case yes).\r\n\r\n*html*\r\n\r\nYou can add arbitrary HTML to your Moodle form:\r\n\r\n<pre>\r\n$mform->addElement(\'html\', \'<div class=\"qheader\">\');\r\n</pre>\r\n\r\nSee \"Question: Can I put a moodleform inside a table td?\" for a concrete example.\r\n\r\n*htmleditor & format*\r\n\r\n<pre>\r\n$mform->addElement(\'htmleditor\', \'text\', get_string(\'choicetext\', \'choice\'));\r\n$mform->setType(\'text\', PARAM_RAW);\r\n$mform->addRule(\'text\', null, \'required\', null, \'client\');\r\n \r\n$mform->addElement(\'format\', \'format\', get_string(\'format\'));\r\n\r\n</pre>\r\nYou can supply a fourth param to htmleditor of an array of options :\r\n\r\n<pre>\r\narray(\r\n    \'canUseHtmlEditor\'=>\'detect\',\r\n    \'rows\'  => 10, \r\n    \'cols\'  => 65, \r\n    \'width\' => 0,\r\n    \'height\'=> 0, \r\n    \'course\'=> 0,\r\n);\r\n</pre>\r\n//options same as print_textarea params\r\n//use rows and cols options to control htmleditor size.\r\n\r\n*modgrade*\r\n\r\n<pre>\r\n        $mform->addElement(\'modgrade\', \'scale\', get_string(\'grade\'), false);\r\n</pre>\r\n\r\nThis is a custom element for selecting a grade for any activity module. The fourth argument is whether to include an option for no grade which has a value 0. This select box does include scales. The default is true, include no grade option.\r\n\r\nA helpbutton is automatically added.\r\n\r\n\r\n*password*\r\n\r\n<pre>\r\n         $mform->addElement(\'password\', \'password\', get_string(\'label\'), $attributes);\r\n</pre>\r\n\r\nA password element. Fourth param is an array or string of attributes.\r\npasswordunmask\r\n\r\nMoodle1.9\r\n\r\n\r\n<pre>\r\n         $mform->addElement(\'passwordunmask\', \'password\', get_string(\'label\'), $attributes);\r\n</pre>\r\n\r\nA password element with option to show the password in plaintext. Fourth param is an array or string of attributes.\r\n\r\n*radio*\r\n\r\n<pre>\r\n$radioarray=array();\r\n$radioarray[] = &MoodleQuickForm::createElement(\'radio\', \'yesno\', \'\', get_string(\'yes\'), 1, $attributes);\r\n$radioarray[] = &MoodleQuickForm::createElement(\'radio\', \'yesno\', \'\', get_string(\'no\'), 0, $attributes);\r\n$mform->addGroup($radioarray, \'radioar\', \'\', array(\' \'), false);\r\n\r\n</pre>\r\nSecond param names the radio button and should be the same for each button in the group in order to toggle correctly. Third param would be the label for the form element but is generally ignored as this element will always be in a group which has it\'s own label. Fourth param is a string, a label to be displayed on the right of the element. The fifth is the value for this radio button. $attributes can be a string or an array of attributes.\r\n\r\nIt is possible to add help to individual radio buttons but this requires a custom template to be defined for the group elements. See MDL-15571.\r\n\r\n*setDefault*\r\n\r\nTo set the default for a radio button group as above use the following :\r\n\r\n<pre>\r\n$mform->setDefault(\'yesno\', 0);\r\n</pre>\r\n\r\nThis would make the default \'no\'.\r\n\r\n*select*\r\n\r\n<pre>\r\n        $mform->addElement(\'select\', \'type\', get_string(\'forumtype\', \'forum\'), $FORUM_TYPES, $attributes);\r\n</pre>\r\n\r\nThe fourth param for this element is an array of options for the select box. The keys are the values for the option and the value of the array is the text for the option. The fifth param $attributes is optional, see text element for description of attributes param.\r\n\r\nIt is also possible to create a select with certain options disabled, using this technique.\r\n\r\n*multi-select*\r\n\r\n<pre>\r\n        $select = &$mform->addElement(\'select\', \'colors\', get_string(\'colors\'), array(\'red\', \'blue\', \'green\'), $attributes);\r\n        $select->setMultiple(true);\r\n\r\n</pre>\r\n\r\n*selectyesno*\r\n\r\n<pre>\r\n        $mform->addElement(\'selectyesno\', \'maxbytes\', get_string(\'maxattachmentsize\', \'forum\'));\r\n</pre>\r\n\r\nIf you want a yes / no select box this one automatically translates itself and has value 1 for yes and 0 for no.\r\n\r\n*static*\r\n\r\n<pre>\r\n         $mform->addElement(\'static\', \'description\', get_string(\'description\', \'exercise\'),\r\n                  get_string(\'descriptionofexercise\', \'exercise\', $COURSE->students));\r\n</pre>\r\n\r\nThis is a static element. It should be used with care it is used to display a static piece of text with a label. The third param is the label and the fourth is the static text itself.\r\n\r\n*submit, reset and cancel*\r\n\r\n<pre>\r\n        //normally you use add_action_buttons instead of this code\r\n        $buttonarray=array();\r\n        $buttonarray[] = &$mform->createElement(\'submit\', \'submitbutton\', get_string(\'savechanges\'));\r\n        $buttonarray[] = &$mform->createElement(\'reset\', \'resetbutton\', get_string(\'revert\'));\r\n        $buttonarray[] = &$mform->createElement(\'cancel\');\r\n        $mform->addGroup($buttonarray, \'buttonar\', \'\', array(\' \'), false);\r\n        $mform->closeHeaderBefore(\'buttonar\');\r\n</pre>\r\n\r\nA \'Submit\' type element is a submit type form element which will submit the form. A \'Reset\' will not submit the form but will reset any changes the user has made to form contents. A \'Cancel\' element cancels form submission. You need to have a branch in your code before you check for @get_data()@ to check if submission has been cancelled with is_cancelled(); See the example on the usage page.\r\n\r\nYou should name your submit and reset buttons \'submitbutton\' and \'resetbutton\' or something similar (not \'submit\' and \'reset\'). This avoids problems in JavaScript of collisions between form element names and names of JavaScript methods of the form object.\r\n<pre>\r\nadd_action_buttons($cancel = true, $submitlabel=null);\r\n</pre>\r\n\r\nYou will normally use this helper function which is a method of moodleform to add all the \'action\' buttons to the end of your form. A boolean parameter allow you to specify whether to include a cancel button and specify the label for your submit button (pass the result of get_string). Default for the submit button label is @get_string(\'savechanges\')@.\r\n\r\n*text*\r\n\r\n<pre>\r\n        $mform->addElement(\'text\', \'name\', get_string(\'forumname\', \'forum\'), $attributes);\r\n</pre>\r\n\r\nFor a simple text element. Your fourth parameter here can be a string or array of attributes for the text element. The following are equivalent :\r\n\r\n<pre>\r\n        $attributes=\'size=\"20\"\';\r\n        $attributes=array(\'size\'=>\'20\');\r\n</pre>\r\n\r\nGenerally you are encouraged to use CSS instead of using attributes for styling.\r\n\r\n\r\nA format element can be used as a format select box. It will be non-selectable if you\'re using an html editor.\r\n\r\nThe third param for this element is @$useHtmlEditor@ and it defaults to null in which case an html editor is used if the browser and user profile support it.\r\n\r\n*textarea*\r\n\r\n<pre>\r\n            $mform->addElement(\'textarea\', \'introduction\', get_string(\"introtext\", \"survey\"), \'wrap=\"virtual\" rows=\"20\" cols=\"50\"\');\r\n</pre>\r\n\r\nA textarea element. If you want an htmleditor use htmleditor element. Fourth element here is a string or array of attributes.\r\n\r\n*recaptcha*\r\n\r\nMoodle1.9\r\n\r\n\r\n<pre>\r\n            $mform->addElement(\'recaptcha\', \'recaptcha_field_name\', $attributes);\r\n</pre>\r\n\r\nUse this recaptcha element to reduce the spam risk in your forms. Third element here is a string or array of attributes. Take care to get an API key from http://recaptcha.net/api/getkey before using this element.\r\n\r\nTo check whether recaptcha is enabled at site level use:\r\n\r\n<pre>\r\nif (!empty($CFG->recaptchapublickey) && !empty($CFG->recaptchaprivatekey)) {\r\n    //recaptcha is enabled\r\n}\r\n</pre>\r\n\r\n*tags*\r\n\r\nMoodle 2.0\r\n\r\n\r\n<pre>\r\n            $mform->addElement(\'tags\', \'field_name\', $lable, $options, $attributes);\r\n</pre>\r\n\r\nUsed for editing a list of tags, for example on a blog post.\r\n\r\nThere is only one option available, \'display\', which should be set to one of the contstants MoodleQuickForm_tags::ONLYOFFICIAL, NOOFFICIAL or DEFAULTUI. This controls whether the official tags are listed for easy selection, or a text area where arbitrary tags may be typed, or both. The default is both.\r\n\r\nThe value should be set/returned as an array of tags.\r\n\r\n*addGroup*\r\n\r\nA \'group\' in formslib is just a group of elements that will have a label and will be included on one line.\r\n\r\nFor example typical code to include a submit and cancel button on the same line :\r\n\r\n<pre>\r\n        $buttonarray=array();\r\n        $buttonarray[] =& $mform->createElement(\'submit\', \'submitbutton\', get_string(\'savechanges\'));\r\n        $buttonarray[] =& $mform->createElement(\'submit\', \'cancel\', get_string(\'cancel\'));\r\n        $mform->addGroup($buttonarray, \'buttonar\', \'\', array(\' \'), false);\r\n</pre>\r\n\r\nYou use the same arguments for createElement as you do for addElement. Any label for the element in the third argument is normally ignored (but not in the case of the submit buttons above where the third argument is not for a label but is the text for the button).\r\n\r\nHere\'s a bad example (don\'t do this for real, use the \'optional\' => true option of the date element): putting a date_selector (which is itself a group of elements) and a checkbox on the same line, note that you can disable every element in the group using the group name \'availablefromgroup\' but it doesn\'t disable the controlling element the \'availablefromenabled\' checkbox:\r\n\r\n<pre>\r\n        $availablefromgroup=array();\r\n	$availablefromgroup[] =& $mform->createElement(\'date_selector\', \'availablefrom\', \'\');\r\n	$availablefromgroup[] =& $mform->createElement(\'checkbox\', \'availablefromenabled\', \'\', get_string(\'enable\'));\r\n        $mform->addGroup($availablefromgroup, \'availablefromgroup\', get_string(\'availablefromdate\', \'data\'), \' \', false);\r\n        $mform->disabledIf(\'availablefromgroup\', \'availablefromenabled\');\r\n</pre>\r\n\r\n\r\n\r\n*addRule*\r\n\r\n<pre>\r\n        $mform->addRule(\'elementname\', get_string(\'error\'), \'rule type\', \'extraruledata\', \'server\'(default), false, false);\r\n</pre>\r\n\r\nThe first param(element) is an element name and second(message) is the error message that will be displayed to the user. The third parameter(type) is the type of rule. The fourth param(format) is used for extra data needed with some rules such as minlength and regex. The fifth parameter(validation) validates input data on server or client side, if validation is done on client side then it will be checked on the server side as well.\r\n\r\n * @param    string     $element       Form element name\r\n * @param    string     $message       Message to display for invalid data\r\n * @param    string     $type          Rule type, use getRegisteredRules() to get types\r\n * @param    string     $format        (optional)Required for extra rule data\r\n * @param    string     $validation    (optional)Where to perform validation: \"server\", \"client\"\r\n * @param    boolean    $reset         Client-side validation: reset the form element to its original value if there is an error?\r\n * @param    boolean    $force         Force the rule to be applied, even if the target form element does not exist\r\n\r\nCommon Rule Types\r\n\r\n    * required\r\n    * maxlength\r\n    * minlength\r\n    * rangelength\r\n    * email\r\n    * regex\r\n    * lettersonly\r\n    * alphanumeric\r\n    * numeric\r\n    * nopunctuation\r\n    * nonzero\r\n    * callback\r\n    * compare \r\n\r\n*setHelpButton*\r\n\r\nMoodle1.9\r\n\r\n\r\n<pre>\r\n            $mform->setHelpButton(\'lessondefault\', array(\'lessondefault\', get_string(\'lessondefault\', \'lesson\'), \'lesson\'));\r\n</pre>\r\n\r\nFirst param is an elementname and the second param is an array of params that are passed to helpbutton in weblib.php. Params are :\r\n\r\n * @param string $page  The keyword that defines a help page\r\n * @param string $title The title of links, rollover tips, alt tags etc\r\n *           \'Help with\' (or the language equivalent) will be prefixed and \'...\' will be stripped.\r\n * @param string $module Which module is the page defined in\r\n * @param mixed $image Use a help image for the link?  (true/false/\"both\")\r\n * @param boolean $linktext If true, display the title next to the help icon.\r\n * @param string $text If defined then this text is used in the page, and\r\n *           the $page variable is ignored.\r\n * @param boolean $return If true then the output is returned as a string, if false it is printed to the current page.\r\n * @param string $imagetext The full text for the helpbutton icon. If empty use default help.gif\r\n\r\nMake sure you don\'t set boolean $return to false.\r\n\r\nYou need to do use this method after @addElement();@\r\n\r\n*addHelpButton*\r\n\r\nMoodle 2.0\r\n\r\n\r\n<pre>\r\n            $mform->addHelpButton(\'api_key_field\', \'api_key\', \'block_extsearch\');\r\n</pre>\r\n\r\nIn Moodle 2.0 the \"setHelpButton\" method has been deprecated in favor of the \"addHelpButton\" method, which has a simplified interface and uses @$OUTPUT->help_icon()@ on the back end. The following parameters are expected:\r\n\r\n* @param $elementname The name of the form element to add the help button for\r\n* @param $identifier The identifier for the help string and its title (see below)\r\n* @param $component The component name to look for the help string in\r\n\r\nUnlike in Moodle 1.9, it is no longer necessary to put your help pages in separate HTML files. Instead, the function looks for two strings:\r\n\r\n1. @get_string($identifier, $component)@: The title of the help page\r\n2. @get_string(\"{$identifier}_help\", $component)@: The content of the help page\r\n\r\nSo you will need to have $identifier and {$identifier}_help defined in order for the help button to be created properly.\r\n\r\n*setDefault*\r\n\r\n<pre>\r\n        $mform->addElement(\'select\', \'grade\', get_string(\'gradeforsubmission\', \'exercise\'), $grades);\r\n        $mform->setHelpButton(\'grade\', array(\'grade\', get_string(\'gradeforsubmission\', \'exercise\'), \'exercise\'));\r\n        $mform->setDefault(\'grade\', 100);\r\n\r\n</pre>\r\nSet the default of the form value with setDefault($elementname, $value); where elementname is the elementname whose default you want to set and $value is the default to set. We set the defaults for the form in definition(). This default is what is used if no data is loaded into the form with set_data(); eg. on display of the form for an \'add\' rather than \'update\' function.\r\n\r\n*disabledIf*\r\n\r\nFor any element or groups of element in a form you can conditionally disable the group or individual element depending on conditions.\r\n\r\nYou can use @$mform->disabledIf($elementName, $dependentOn, $condition = \'notchecked\', $value=null)@\r\n\r\n    * elementname can be a group. If you specify a group all elements in the group will be disabled (if dependentOn is in elementname group that is ignored and not disabled). These are the element names you\'ve used as the second argument in addElement or addGroup.\r\n    * dependentOn is the actual name of the element as it will appear in html. This can be different to the name used in addGroup particularly but also addElement where you\'re adding a complex element like a date_selector. Check the html of your page. You typically make the depedentOn a checkbox or select box.\r\n    * $condition will be \'notchecked\', \'checked\', \'noitemselected\', \'eq\' or, if it is anything else, we test for \'neq\'.\r\n          o If $condition is \'eq\' or \'neq\' then we check the value of the dependentOn field and check for equality (==) or nonequality (!=) in js\r\n          o If $condition is \'checked\' or \'notchecked\' then we check to see if a checkbox is checked or not.\r\n          o If $condition is \'noitemselected\' then we check to see whether nothing is selected in a dropdown list. \r\n\r\nExamples:\r\n\r\n<pre>\r\n// Disable my control unless a checkbox is checked.\r\n$mform->disabledIf(\'mycontrol\', \'somecheckbox\');\r\n\r\n// Disable my control if a checkbox is checked.\r\n$mform->disabledIf(\'mycontrol\', \'somecheckbox\', \'checked\');\r\n\r\n// Disable my control unless a dropdown has value 42.\r\n$mform->disabledIf(\'mycontrol\', \'someselect\', \'eq\', 42);\r\n\r\n</pre>\r\nThe possible choices here are in the function lockoptionsall in lib/javascript-static.js.\r\n\r\n*setType*\r\n\r\nPARAM_* types are used to specify how a submitted variable should be cleaned. These should be used for get parameters such as id, course etc. which are used to load a page and also with @setType()@; method. Every form element should have a type specified except select, radio box and checkbox elements, these elements do a good job of cleaning themselves (only specified options are allowed as user input).\r\nMost Commonly Used PARAM_* Types\r\n\r\nThese are the most commonly used PARAM_* types and their proper uses. More types can be seen in moodlelib.php starting around line 100.\r\n\r\n    * PARAM_CLEAN is deprecated and you should try to use a more specific type.\r\n    * PARAM_TEXT should be used for cleaning data that is expected to be plain text. It will strip all html tags. But will still let tags for multilang support through.\r\n    * PARAM_NOTAGS should be used for cleaning data that is expected to be plain text. It will strip *all* html type tags. It will still *not* let tags for multilang support through. This should be used for instance for email addresses where no multilang support is appropriate.\r\n    * PARAM_RAW means no cleaning whatsoever, it is used mostly for data from the html editor. Data from the editor is later cleaned before display using format_text() function. PARAM_RAW can also be used for data that is validated by some other way or printed by p() or s().\r\n    * PARAM_INT should be used for integers.\r\n    * PARAM_ACTION is an alias of PARAM_ALPHA and is used for hidden fields specifying form actions. \r\n\r\nReferences\r\n\r\n    * \"PEAR HTML QuickForm Getting Started Guide by Keith Edmunds of Midnighthax.com\":http://www.midnighthax.com/quickform.php\r\n    * \"PEAR::HTML_QuickForm manual\":http://pear.php.net/manual/en/package.html.html-quickform.php\r\n\r\nIf you have problems creating php forms you may get them with form builder http://phpforms.net/tutorial/html-basics/form-builder.html\r\nRetrieved from \"http://docs.moodle.org/en/Development:lib/formslib.php_Form_Definition\"\r\n','2011-04-15 15:18:00','2011-04-15 15:18:00',6,NULL,0,0,NULL,NULL),(3,3,'Development: lib/formslib.php Validation','Custom validation of forms','To add extra serverside validation\r\n\r\n<pre>\r\nfunction validation($data) {\r\n\r\n        $errors = array();\r\n        if (!confirm_sesskey()) {\r\n            print_error(\'confirmsesskeybad\');\r\n        }\r\n        if (empty($data[\'mailto\'])) {\r\n          $errors[\'selected\'] = get_string(\'missingmailrecipients\',\'local_mail\');\r\n        }\r\n\r\n        return $errors;\r\n    }\r\n\r\n</pre>\r\n\r\nThe index of the $errors array must be the name of the field the error message should appear above.','2011-04-15 20:36:02','2011-04-15 20:36:37',6,NULL,0,0,NULL,NULL),(4,3,'Assign users to a role.','Users can have many roles, some are only applicable within a course like teacher, and student. Some should be applicable anywhere in Moodle. These are called system roles and are set through system administration.','Users can have many roles, some are only applicable within a course like teacher, and student. Some should be applicable anywhere in Moodle. These are called system roles and are set through system administration.\r\n\r\nTo assign a system role to a user login as an admin, then go to the Settings block, Site Administration > Users > Permissions > Assign system roles.\r\n\r\nThis takes you to a list of system roles, click the one you want to assign the user to. The page changes to one with two lists Existing users and potential users. The existing users have the selected role, potential users is the list of users that may be assigned to the role. Select the user(s) you wish to assign in the potential users list (use the search underneath the list if there are too many users to list.) then click Add and the selected users will be moved to the existing users list.\r\n\r\nThat\'s it the users now have that role.','2012-04-30 17:46:53','2012-04-30 18:25:00',6,NULL,0,0,NULL,NULL),(5,3,'Amend the text on the front page of CEVLE','The CEVLE Moodle has a bespoke front page so the method used to edit the text above the buttons is none standard.','The CEVLE Moodle has a bespoke front page so the method used to edit the text above the buttons is none standard.\r\n\r\nIt has a html text block as the text above the login to profile and course information buttons.\r\n\r\nIf this block should be removed it can be added back by logging in as an admin and going to the front page. In settings turn Editing on, this will have appended an add block option to the sidebar. Use this to add a HTML block.\r\n\r\nThe block will appear in the sidebar. Click the edit icon (hand holding a pen) to edit the configuration.\r\nSet the block title to the text you wish to appear in green as the heading currently \"Welcome to the Cheshire East Lifelong Learning\".\r\nSet the content to be the text you wish to appear on the front page.\r\n\r\nSet the Page contexts to be \"Display on the front page only\".\r\nDefault region should be \"Center\".\r\nDefault weight should be \"-10 (first)\".\r\n\r\nVisible must be \"Yes\" otherwise it will not appear if the user is not logged in.\r\nThe region and weight should be the same as the default region and default weight.\r\n\r\nClick \"Save changes\" to save the block configuration and check it appears correctly on the front page.\r\n\r\nIf the block already exists and you just need to change the content, turn on editing, click the edit icon which will appear under the title but above the green line. Amend the block title and/or content as required then save changes.','2012-04-30 18:00:53','2012-04-30 18:24:05',6,NULL,0,0,NULL,NULL),(6,3,'Add Latest News block to all pages in CEVLE.','The CEVLE Moodle has a custom \"Latest News\" block but the following instructions would also apply to the standard \"Latest news\" block.','The CEVLE Moodle has a custom \"Latest News\" block but the following instructions would also apply to the standard \"Latest news\" block.\r\n\r\nLogin as an admin and turn editing on in the settings block.\r\n\r\nUse Add Block to add a \"Latest News\" block (if two appear in the list the custom one is the one with a capital N for News).\r\nSet the page contexts to \"Display throughout the entire site\".\r\nRestrict to these page types should be \"Any Page\".\r\nDefault region and region should be \"Left\".\r\nDefault weight and weight should be \"-10 (first)\".\r\nVisible must be \"Yes\" otherwise the block will not appear for users that are not logged in.\r\n\r\nThe block must also have permission for a \"Guest\" to view the block.\r\nClick the \"Assign Roles\" option (face) in the block. Ignore the \"You are not able to assign any roles here\" and click \"Permissions\" within the settings block. Ensure that the \"View Block\" option has \"Guest\" listed under the roles with permission column. If it does not appear click the plus icon within the column and choose \"Guest\" from the select role drop-down and then click \"Allow\".  \r\n\r\nThe Site News forum must also be visible for the block to display. This can be checked by clicking on the older topics in the block and then clicking Edit Setting in the Setting block. The visible option is in the Common module settings section at the bottom. This must be set to \"Show\". ','2012-04-30 18:20:42','2012-04-30 18:24:37',6,NULL,0,0,NULL,NULL),(7,4,'Resources','Useful sites and tutorials','\"Ruby on Rails\":http://rubyonrails.org/ - The main Ruby on Rails website\r\n\r\n\"Railscasts\":http://railscasts.com - Some of the early episodes are dated, some later ones require a subscription\r\n\r\n\"Ruby on Rails Tutorial for version 3.2\":http://ruby.railstutorial.org/ruby-on-rails-tutorial-book?version=3.2 - A Tutorial to go through a basic web application\r\n\r\n\"Rails Guides for 3.2\":http://guides.rubyonrails.org/v3.2.14/ - the official guides\r\n\r\n\"Rails API for all versions\":http://apidock.com/rails/browse - An API reference for all versions of rails\r\n\r\n\"RubyRogues\":http://rubyrogues.com/ - Podcasts that have a panel and a guest discussing a ruby related topic.\r\n\r\n\"CSS-Tricks\":http://css-tricks.com/ - Articles about webdesign in general, not rails specific, the almanac is a css reference.\r\n\r\n\"Mozilla Web Development\":https://developer.mozilla.org/en/docs/Web_Development - General information about web development, has css, html and javascript references.','2013-12-10 16:13:02','2013-12-17 15:40:04',6,NULL,0,0,NULL,NULL),(9,9,'Redmine Issue Tracking Protocol','This is the procedure for issue workflow. This should be followed as carefully as possible. Let us know if there is a problem so we can keep reviewing the procedure so it is as flexible and usable as possible.','\"Redmine Issue Tracking Protocol\":https://officecraft.sharepoint.com/sites/Terrabase/Shared%20Documents/Company/Procedures/Redmine%20Issue%20Tracking%20Protocol.pdf','2015-02-27 15:46:10','2015-02-27 15:46:10',3,NULL,0,0,NULL,NULL),(10,10,'User interface standards','','\"User interface standards\":https://officecraft.sharepoint.com/sites/Terrabase/Shared%20Documents/Company/Documentation/User%20Interface%20Standards%20Document.pdf','2015-02-27 17:00:39','2015-02-27 17:00:39',3,NULL,0,0,NULL,NULL),(11,10,'Data Loss Policy','','\"Data Loss Policy\":https://officecraft.sharepoint.com/sites/Terrabase/Shared%20Documents/Company/Documentation/Data%20Loss%20Policy.pdf','2015-03-02 15:29:14','2015-03-02 16:29:56',3,NULL,0,0,NULL,NULL),(12,10,'Accessibility Guidelines','','\"Accessibility Guidelines\":https://officecraft.sharepoint.com/sites/Terrabase/Shared%20Documents/Company/Documentation/Accessibility%20Guidelines.pdf','2015-03-02 15:34:50','2015-03-02 16:20:46',3,NULL,0,0,NULL,NULL),(13,10,'(AG-B) Bespoke software agreement (generic)','','\"(AG-B) Bespoke software agreement (generic)\":https://officecraft.sharepoint.com/sites/Terrabase/Shared%20Documents/Company/Documentation/(AG-B)%20Bespoke%20software%20agreement%20(generic).pdf','2015-03-06 16:04:05','2015-03-06 16:04:05',3,NULL,0,0,NULL,NULL),(14,10,'(AG-B) Bespoke software agreement (generic) - dotx','','\"(AG-B) Bespoke software agreement (generic) - dotx\":https://officecraft.sharepoint.com/sites/Terrabase/_layouts/15/WopiFrame.aspx?sourcedoc=%7BFC9A522C-C1E6-485F-8620-50718C1964D8%7D&file=(AG-B)%20Bespoke%20software%20agreement.dotx&action=default','2015-03-06 16:05:29','2015-03-06 16:05:29',3,NULL,0,0,NULL,NULL);
/*!40000 ALTER TABLE `kb_articles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `kb_categories`
--

DROP TABLE IF EXISTS `kb_categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `kb_categories` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `description` text,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `lft` int(11) DEFAULT NULL,
  `rgt` int(11) DEFAULT NULL,
  `project_id` int(11) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `kb_categories`
--

LOCK TABLES `kb_categories` WRITE;
/*!40000 ALTER TABLE `kb_categories` DISABLE KEYS */;
INSERT INTO `kb_categories` VALUES (1,'Useful Knowledge','Knowledge that is usefull but not project specific','2010-11-22 18:28:55','2010-11-22 19:20:01',NULL,1,2,0),(2,'Redmine','Project Management package','2010-11-22 19:20:43','2010-11-22 19:20:43',NULL,3,4,0),(3,'Moodle','','2011-04-15 14:46:49','2011-04-15 14:46:49',NULL,5,6,0),(4,'Ruby on Rails','','2013-12-10 15:51:29','2013-12-10 15:51:29',NULL,7,8,0),(8,'General Documents','','2015-02-25 15:47:58','2015-02-25 15:47:58',NULL,9,14,0),(9,'Procedures','','2015-02-27 15:43:54','2015-02-27 15:43:54',8,10,11,0),(10,'Documentation','','2015-02-27 16:59:53','2015-02-27 16:59:53',8,12,13,0);
/*!40000 ALTER TABLE `kb_categories` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2015-04-14 12:45:51
